#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <stdio.h>
#include <time.h>
#include <iostream>
#include <fstream>
#include <iomanip>


using namespace cv;
using namespace std;

Mat OurImage, gray, edges;

vector<vector<Point>> contours;
vector<int> area;

int openFile() {
	string Destination = "C:\\Users\\Olka\\Desktop\\NoveltyDetectionData\\Set2\\TESTING_DATA_ROI\\ble.jpg";
	OurImage = imread(Destination, CV_LOAD_IMAGE_COLOR);
	if (!OurImage.data)
	{
		printf("No image!");
		getchar();
		return -1;
	}
}

void writeFile() {
	ofstream txtFile;
	txtFile.open("C:\\Users\\Olka\\Desktop\\TRAINING.txt"); //przygotowanie pliku tekstowego

	for (int i = 0; i< contours.size(); i++)
	{
		txtFile << left << setw(10) << i;
		txtFile << left << setw(10) << area.at(i) ;
		txtFile << left << setw(10) <<"Contour size" << contours.at(i) << endl;
	}

	txtFile.close();
}

void imgArea(vector<vector<Point>> contours) {

	int area_max = 0;
	for (int i = 0; i < contours.size(); i++)
	{
		area.push_back(contourArea(contours[i]));
		/*
		if (area > area_max) {
			area_max = area;
			figure_no = i;
		}*/
	}
	/*
	fig_area.push_back(area_max);
	area_max = 0;
	return figure_no;*/
}

int main()
{
	openFile();

	Mat ble, morph, morph2, morph3;
	cvtColor(OurImage, gray, CV_BGR2GRAY);
	//blur(ble, gray, Size(5, 5));
	Mat kernel = getStructuringElement(MORPH_RECT, Size(3, 3));
	morphologyEx(gray, morph, 0, kernel);
	Mat kernel2 = getStructuringElement(MORPH_RECT, Size(2, 2));
	morphologyEx(morph, morph2, 2, kernel2);

	threshold(morph2, gray, 200, 255, 2);
	threshold(morph2, morph3, 180, 255, 4);
	Canny(gray, edges, 50, 200, 3);
	vector<Vec4i> hierarchy;
	findContours(edges, contours, hierarchy, CV_RETR_CCOMP, CV_CHAIN_APPROX_TC89_L1, Point(0, 0));
	RNG rng(time(NULL));

	namedWindow("WINDOW", CV_WINDOW_AUTOSIZE);
	imshow("WINDOW", morph);

	imgArea(contours);


	Mat drawing = Mat::zeros(edges.size(), CV_8UC3);
	for (int i = 0; i < contours.size(); i++)
	{
		Scalar color = Scalar(rng.uniform(0, 255), rng.uniform(0, 255), rng.uniform(0, 255));
		if (area.at(i) > 20) {
			drawContours(drawing, contours, i, color, 2, 8, hierarchy, 0, Point());
		}
	}

	cout << "contour size is: " << contours.size() << endl;

	vector<Moments> mu(contours.size());
	for (int i = 0; i<contours.size(); i++)
	{
		mu[i] = moments(contours[i], false);
	}

	writeFile();

	
	waitKey(0);
}
